---
- name: clone or update sources
  git:
    repo: "{{ git_url }}"
    dest: "{{ repo_path }}"
    clone: yes
    update: yes
    version: "{{ git_branch }}"
    accept_hostkey: yes
    key_file: "{{ git_key_file }}"

- name: install gems
  args:
    chdir: "{{ repo_path }}"
  environment:
    RAILS_ENV: "{{ rails_env }}"
  shell: "{{ bundle }} install --deployment --without development test"

- name: install npm packages
  yarn:
    production: true
    path: "{{ repo_path }}"

- name: push configuration key
  copy:
    src: "{{ credentials_master_key_path }}"
    dest: "{{ repo_path }}/config/master.key"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_group }}"
    mode: 0600

- name: migrate db (run once)
  become: yes
  become_user: "{{ deploy_user }}"
  run_once: yes
  args:
    chdir: "{{ repo_path }}"
  environment:
    RAILS_ENV: "{{ rails_env }}"
  shell: "{{ bundle }} exec rails db:migrate --trace"

- name: build webpack bundles
  args:
    chdir: "{{ repo_path }}"
  shell: "{{ bundle }} exec rails webpacker:clobber webpacker:compile"
  environment:
    RAILS_ENV: "{{ rails_env }}"

- name: create directory for the new release
  become: yes
  file:
    state: directory
    path: "{{ new_release_path }}"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_group }}"
    mode: 0755

- name: push distribution
  become: yes
  become_user: "{{ deploy_user }}"
  shell: "rsync -a {{ repo_path }}/ {{ new_release_path }} --exclude .git"

- name: link most recent release to "/var/www/app/current"
  become: yes
  file:
    state: link
    src: "{{ new_release_path }}"
    dest: "{{ app_path }}"
    force: yes
    owner: "{{ deploy_user }}"
    group: "{{ deploy_group }}"
