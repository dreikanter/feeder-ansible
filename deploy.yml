---
- hosts: app
  gather_facts: no
  run_once: true
  tasks:
    - set_fact:
        new_release_name: "{{ app_name }}-{{ lookup('pipe', 'date -u +%Y%m%d%H%M%S') }}"

    - set_fact:
        new_release_path: "{{ releases_path }}/{{ new_release_name }}"

    # TODO: Load admin credentials from secure location

    - when: (http_basic_auth_enabled is defined and http_basic_auth_enabled) and (http_basic_auth_user is not defined)
      set_fact:
        http_basic_auth_user: "{{ lookup('env', 'http_basic_auth_user') }}"

    - when: (http_basic_auth_enabled is defined and http_basic_auth_enabled) and (http_basic_auth_password is not defined)
      set_fact:
        http_basic_auth_password: "{{ lookup('env', 'http_basic_auth_password') }}"

- name: ensure directories structure exists
  hosts: app
  gather_facts: no
  tasks:
    - become: yes
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_group }}"
        mode: u=rwX,g=rX,o=rX
      with_items:
        - "{{ app_root_path }}"
        - "{{ shared_path }}"
        - "{{ logs_path }}"
        - "{{ pids_path }}"
        - "{{ sockets_path }}"
        - "{{ releases_path }}"
        - "{{ repo_path }}"

- name: deploy application
  hosts: app
  roles:
    - deploy

- name: launch app servers
  hosts: app
  roles:
    - puma

# TODO: Delete old releases which are not linked to "/var/www/app/current"

- hosts: app
  gather_facts: no
  run_once: true
  tasks:
  - name: report distrib size
    shell: "du -hs {{ app_path }}/ | awk '{print $1;}'"
    register: p

  - debug:
      msg: "dist size: {{ size }}"
    vars:
      size: "{{ p.get('stdout') }}"

  - name: report disk usage
    debug:
      msg: "total disk space: {{ total }}; available: {{ available }}%"
    vars:
      mount: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"
      available: "{{ mount.size_available | filesizeformat }}"
      total: "{{ mount.size_total | filesizeformat }}"
      available: "{{ (mount.size_available / mount.size_total * 100) | round }}"

  - name: check free space threshold
    assert:
      that: "{{ available }} < 0.9"
      msg: "disk space has reached 90% threshold"
    vars:
      mount: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"
      available: "{{ mount.size_available / mount.size_total }}"
